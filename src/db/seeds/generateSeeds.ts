// scripts/generateSeeds.ts
import fs from "fs"
import path from "path"
import { db } from "@/db/drizzle"
import {
  affiliate,
  affiliateClick,
  affiliateInvoice,
  affiliateLink,
  organization,
  organizationAuthCustomization,
  organizationDashboardCustomization,
  user,
} from "@/db/schema"

// ensure safe Date parsing
function parseDate(value: any): string | Date {
  if (!value) return value
  if (value instanceof Date) return value
  if (typeof value === "string") return new Date(value)
  return value
}

function normalizeRow(table: string, row: any): any {
  const out: any = {}
  for (const [key, value] of Object.entries(row)) {
    if (["createdAt", "updatedAt", "expirationDate"].includes(key)) {
      out[key] = `new Date(${JSON.stringify(parseDate(value))})`
    } else if (
      (table === "organization" &&
        ["currency", "attributionModel", "referralParam"].includes(key)) ||
      (table === "user" && ["role", "type"].includes(key)) ||
      (table === "affiliate" && ["type"].includes(key)) ||
      (table === "affiliateInvoice" &&
        ["currency", "paymentProvider"].includes(key))
    ) {
      // stringify then add `as const`
      out[key] = `${JSON.stringify(value)} as const`
    } else {
      out[key] = JSON.stringify(value)
    }
  }
  return out
}

function rowsToTs(table: string, rows: any[]) {
  const serialized = rows.map((row) => {
    const norm = normalizeRow(table, row)
    const entries = Object.entries(norm)
      .map(([k, v]) => `    ${JSON.stringify(k)}: ${v}`)
      .join(",\n")
    return `  {\n${entries}\n  }`
  })
  return `[\n${serialized.join(",\n")}\n]`
}

async function generateSeeds() {
  const tables = {
    organization: await db.select().from(organization),
    user: await db.select().from(user),
    affiliate: await db.select().from(affiliate),
    affiliateLink: await db.select().from(affiliateLink),
    affiliateClick: await db.select().from(affiliateClick),
    affiliateInvoice: await db.select().from(affiliateInvoice),
    organizationAuthCustomization: await db
      .select()
      .from(organizationAuthCustomization),
    organizationDashboardCustomization: await db
      .select()
      .from(organizationDashboardCustomization),
  }

  let fileContent = `// AUTO-GENERATED by scripts/generateSeeds.ts
// Do not edit manually!\n\n`

  for (const [name, rows] of Object.entries(tables)) {
    fileContent += `export const ${name}_seed = ${rowsToTs(name, rows)};\n\n`
  }

  const outputPath = path.join(
    process.cwd(),
    "src",
    "db",
    "seeds",
    "databaseObjects.ts"
  )
  fs.writeFileSync(outputPath, fileContent)

  console.log("✅ databaseObjects.ts generated successfully!")
}

generateSeeds().catch((err) => {
  console.error("❌ Failed to generate seeds:", err)
  process.exit(1)
})
