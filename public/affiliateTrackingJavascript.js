(function () {
   'use strict';

   // Generated ESM version of ua-parser-js
   // DO NOT EDIT THIS FILE!
   // Source: /src/main/ua-parser.js

   /////////////////////////////////////////////////////////////////////////////////
   /* UAParser.js v2.0.4
      Copyright Â© 2012-2025 Faisal Salman <f@faisalman.com>
      AGPLv3 License *//*
      Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
      Supports browser & node.js environment. 
      Demo   : https://uaparser.dev
      Source : https://github.com/faisalman/ua-parser-js */
   /////////////////////////////////////////////////////////////////////////////////

   /* jshint esversion: 6 */ 
   /* globals window */


       
       //////////////
       // Constants
       /////////////

       var UNDEF_TYPE  = 'undefined',
           OBJ_TYPE    = 'object',
           // properties
           UA_BROWSER  = 'browser',
           UA_CPU      = 'cpu',
           UA_DEVICE   = 'device',
           UA_ENGINE   = 'engine',
           UA_OS       = 'os',
           NAME        = 'name',
           TYPE        = 'type',
           VENDOR      = 'vendor',
           VERSION     = 'version',
           ARCHITECTURE= 'architecture',
           MAJOR       = 'major',
           MODEL       = 'model',

           // device types
           CONSOLE     = 'console',
           MOBILE      = 'mobile',
           TABLET      = 'tablet',
           SMARTTV     = 'smarttv',
           WEARABLE    = 'wearable',
           EMBEDDED    = 'embedded';
      
       var isWindow            = typeof window !== UNDEF_TYPE,
           NAVIGATOR           = (isWindow && window.navigator) ? 
                                   window.navigator : 
                                   undefined;
           (NAVIGATOR && NAVIGATOR.userAgentData) ? 
                                   NAVIGATOR.userAgentData : 
                                   undefined;

       ///////////
       // Helper
       //////////

       var enumerize = function (arr) {
               var enums = {};
               for (var i=0; i<arr.length; i++) {
                   enums[arr[i].toUpperCase()] = arr[i];
               }
               return enums;
           },
           setProps = function (arr) {
               for (var i in arr) {
                   var propName = arr[i];
                   if (typeof propName == OBJ_TYPE && propName.length == 2) {
                       this[propName[0]] = propName[1];
                   } else {
                       this[propName] = undefined;
                   }
               }
               return this;
           };

       /////////////////
       // Factories
       ////////////////

       ((function () {
               var props = { init : {}, isIgnore : {}, isIgnoreRgx : {}, toString : {}};
               setProps.call(props.init, [
                   [UA_BROWSER, [NAME, VERSION, MAJOR, TYPE]],
                   [UA_CPU, [ARCHITECTURE]],
                   [UA_DEVICE, [TYPE, MODEL, VENDOR]],
                   [UA_ENGINE, [NAME, VERSION]],
                   [UA_OS, [NAME, VERSION]]
               ]);
               setProps.call(props.isIgnore, [
                   [UA_BROWSER, [VERSION, MAJOR]],
                   [UA_ENGINE, [VERSION]],
                   [UA_OS, [VERSION]]
               ]);
               setProps.call(props.isIgnoreRgx, [
                   [UA_BROWSER, / ?browser$/i],
                   [UA_OS, / ?os$/i]
               ]);
               setProps.call(props.toString, [
                   [UA_BROWSER, [NAME, VERSION]],
                   [UA_CPU, [ARCHITECTURE]],
                   [UA_DEVICE, [VENDOR, MODEL]],
                   [UA_ENGINE, [NAME, VERSION]],
                   [UA_OS, [NAME, VERSION]]
               ]);
               return props;
       }))();
       enumerize([NAME, VERSION, MAJOR, TYPE]);
       enumerize([ARCHITECTURE]);
       enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
       enumerize([NAME, VERSION]);

   (async function () {
       const REF_KEYS = ["ref", "aff", "via"];
       function getReferralCode() {
           const urlParams = new URLSearchParams(window.location.search);
           for (const key of REF_KEYS) {
               if (urlParams.has(key))
                   return urlParams.get(key);
           }
           return null;
       }
       function getCookie(name) {
           return document.cookie
               .split("; ")
               .find((row) => row.startsWith(name + "="));
       }
       // ðŸ”¥ Track affiliate if code is present and hasn't been tracked
       const refCode = getReferralCode();
       if (refCode && !getCookie("refearnapp_affiliate_click_tracked")) {
           try {
               // const result = await storeRefCode(refCode);
               // if (!result) return;
               //
               // const { maxAge, affiliateData } = result;
               //
               // sendTrackingData({
               //   ref: refCode,
               //   referrer: document.referrer,
               //   userAgent: navigator.userAgent,
               //   url: window.location.href,
               //   ...getDeviceInfo(),
               // });
               //
               // setTempClickCookie(maxAge, affiliateData);
               document.cookie = `refearnapp_affiliate_click_tracked=true; max-age=86400; path=/`;
           }
           catch (err) {
               console.error("Affiliate tracking failed:", err);
           }
       }
   })();

})();
//# sourceMappingURL=affiliateTrackingJavascript.js.map
